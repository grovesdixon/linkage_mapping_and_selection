}
if (map.allele == "p"){
if (rs == 'FALSE'){
cdp = append(cdp, -1*dp)
next
}
if (rs == 'TRUE'){
cdp = append(cdp, dp)
next
}
}
if (map.allele == "m"){
if (rs == 'FALSE'){
cdp = append(cdp, -1*dp)
next
}
if (rs == 'TRUE'){
cdp = append(cdp, dp)
next
}
}
if (map.allele == "l"){
if (rs == 'TRUE'){
cdp = append(cdp, -1*dp)
next
}
if (rs == 'FALSE'){
cdp = append(cdp, dp)
next
}
}
if (map.allele == "h"){
if (ref.allele == first.allele){
cdp = append(cdp, dp)
}
if (ref.allele != first.allele){
cdp = append(cdp, -1*dp)
}
}
if (map.allele == "k"){
if (ref.allele == first.allele){
cdp = append(cdp, -1*dp)
}
if (ref.allele != first.allele){
cdp = append(cdp, dp)
}
}
}
return(cdp)
}
#SET UP MERGED DATASETS WITH THE FORMATTED PHASING DATA AND THE CHANGES IN ALLELE FREQUENCY
ac.dat = merge(cum.dat, ac.delt.ps, by = 'variant')
ca.dat = merge(cum.dat, ca.delt.ps, by = 'variant')
control.dat = merge(cum.dat, con.delt.ps, by = 'variant')
#USE ref.single() TO SET UP A COLUMN SAYING WHETHER THE REFERENCE ALLELE IS SINGLE COPY AMONG THE PARENTS
ac.dat$ref.single = ref.single(ac.dat$A, ac.dat$C, ac.dat$ref)
ca.dat$ref.single = ref.single(ca.dat$A, ca.dat$C, ca.dat$ref)
control.dat$ref.single = ref.single(control.dat$A, control.dat$C, control.dat$ref)
#COPY THE CONTROL DATAFRAME INTO TWO SEPARATE ONES, ONE FOR EACH CROSS
#this is because it doesn't make sense to use the average change in allele frequency
AC.control.dat = control.dat
CA.control.dat = control.dat
#CALCULATE THE ALLELE FREQUENCY CHANGES FOR HETEROZYGOUS LOCI ON EACH CHROMOSOME
#for ac replicates
ac.dat$AC1dp = chrom.dp(ac.dat, 'A.c1', 'ref', 'A', 'ref.single', 'mean')
ac.dat$AC2dp = chrom.dp(ac.dat, 'A.c2', 'ref', 'A', 'ref.single', 'mean')
ac.dat$CC1dp = chrom.dp(ac.dat, 'C.c1', 'ref', 'C', 'ref.single', 'mean')
ac.dat$CC2dp = chrom.dp(ac.dat, 'C.c2', 'ref', 'C', 'ref.single', 'mean')
#for ca replicates
ca.dat$AC1dp = chrom.dp(ca.dat, 'A.c1', 'ref', 'A', 'ref.single', 'mean')
ca.dat$AC2dp = chrom.dp(ca.dat, 'A.c2', 'ref', 'A', 'ref.single', 'mean')
ca.dat$CC1dp = chrom.dp(ca.dat, 'C.c1', 'ref', 'C', 'ref.single', 'mean')
ca.dat$CC2dp = chrom.dp(ca.dat, 'C.c2', 'ref', 'C', 'ref.single', 'mean')
#for the ac controls
AC.control.dat$AC1dp = chrom.dp(AC.control.dat, 'A.c1', 'ref', 'A', 'ref.single', 'AC.Controls.delta.p')
AC.control.dat$AC2dp = chrom.dp(AC.control.dat, 'A.c2', 'ref', 'A', 'ref.single', 'AC.Controls.delta.p')
#for the ca controls
CA.control.dat$CA1dp = chrom.dp(CA.control.dat, 'C.c1', 'ref', 'C', 'ref.single', 'CA.Controls.delta.p')
CA.control.dat$CA2dp = chrom.dp(CA.control.dat, 'C.c2', 'ref', 'C', 'ref.single', 'CA.Controls.delta.p')
#MAKE TWO SUBSET DATAFRAMES OF ONLY THE HETEROZYGOUS VARIANTS FOR EACH PARENT
# #for the ac replicates (parent A is mom)
ac.a.poly = ac.dat[ac.dat$crossType != 'nnxnp',] #include variants except when parent A is homozygous
ac.c.poly = ac.dat[ac.dat$crossType != 'lmxll',] #include variants except when parent C is homozygous
ac.a.poly = ac.a.poly[with(ac.a.poly, order(cM)),]
ac.c.poly = ac.c.poly[with(ac.c.poly, order(cM)),]
#for the ca replicates (parent C is mom)
#(note that for linkage mapping all markers were noted as if parent A were mother, so nnxnp indicates that C was heterozygous)
ca.c.poly = ca.dat[ca.dat$crossType != 'lmxll',] #include variants except when parent C is homozygous
ca.a.poly = ca.dat[ca.dat$crossType != 'nnxnp',] #include variants except when parent A is homozygous
ca.c.poly = ca.c.poly[with(ca.c.poly, order(cM)),]
ca.a.poly = ca.a.poly[with(ca.a.poly, order(cM)),]
#for the ac control comparisons
ac.control.poly = AC.control.dat[AC.control.dat$crossType != 'nnxnp',]
ca.control.poly = CA.control.dat[CA.control.dat$crossType != 'lmxll',]
ac.control.poly = ac.control.poly[with(ac.control.poly, order(cM)),]
ca.control.poly = ca.control.poly[with(ca.control.poly, order(cM)),]
#if not using only hets
# ac.a.poly = ac.dat[with(ac.dat, order(cM)),]
# ac.c.poly = ac.dat[with(ac.dat, order(cM)),]
# ca.a.poly = ca.dat[with(ac.dat, order(cM)),]
# ca.c.poly = ca.dat[with(ac.dat, order(cM)),]
#FUNCTION plot.chroms
#Plots the chromosome specific allele frequency changes for a given parent
plot.chroms = function(dat, lgs, chrom1.col, chrom2.col, YLIM, MAIN, XLAB, YLAB, COLORS, CUT, ADD){
if (ADD == FALSE){
plot(dat[,chrom1.col]~dat$cM, type = "n", ylim = YLIM, main = MAIN, axes = F, xlab = XLAB, ylab = YLAB)
}
for (i in lgs){
lg.sub = dat[dat$lg == i,]
lines(lg.sub[,chrom1.col]~lg.sub$cM, col = COLORS[1], lwd = 1)
lines(lg.sub[,chrom2.col]~lg.sub$cM, col = COLORS[2], lwd = 1)
}
abline(v = endpoints, col = 'grey', lwd = 0.5)
sig = dat[p.adjust(dat$fisher.p, method = "BH") < CUT,]
points(abs(sig[,chrom1.col])~sig$cM, pch = 19, col = 'red', cex = 0.5)
#   legend(1410, 0, c("Chromosome 1", "Chromosome 2"), fill = c('red', 'blue'))
axis(1, at = endpoints, labels = F)
axis(2, las = 1)
mtext(lg.names, side = 1, at = mids, line = .75)
}
#UPLOAD BOOTSTRAP BAR COORDINATES FROM selection_analysis2_chiSquare.R
setwd(path.2.working.dir)
ac.bar = read.table("ac_bars.txt")
ca.bar = read.table("ca_bars.txt")
#FUNCTION TO PLOT THE BARS
add.bars = function(bar.dat, bar.colors){
easy = bar.dat[bar.dat$lvl == 'easy',]
for (i in 1:nrow(easy)){
x0 = easy$lefts[i]
x1 = easy$rights[i]
y = .0
segments(x0, y, x1, y, lwd = 3, col = bar.colors[1])
}
hard = bar.dat[bar.dat$lvl == 'hard',]
print(hard)
for (i in 1:nrow(hard)){
x0 = hard$lefts[i]
x1 = hard$rights[i]
y = 0
segments(x0, y, x1, y, lwd = 3, col = bar.colors[2])
}
}
#PLOT FOR THE AC REPLICATES
YLIM = c(-.3, .3)
COLORS = c('cyan3', 'coral')
bar.colors = c('darkgreen', 'yellowgreen')
CUT = 0.05
quartz()
par(mfrow = c(2,1))
titleM = "AC (heat vs control) Maternal Chromosomes"
titleP = "AC (heat vs control) Paternal Chromosomes"
YLAB = expression(paste('P'['heat'], " - P"["control"], sep = ""))
plot.chroms(ac.a.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.c.poly, lgs, 'CC1dp', 'CC2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
add.bars(ac.bar, bar.colors)
#PLOT FOR THE CA REPLICATES
quartz()
par(mfrow = c(2,1))
titleM = "CA (heat vs control) Maternal Chromosomes"
titleP = "CA (heat vs control) Paternal Chromosomes"
plot.chroms(ca.c.poly, lgs, 'CC1dp', 'CC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.a.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
add.bars(ca.bar, bar.colors)
#PLOT FOR THE CONTROLS
quartz()
par(mfrow = c(2,1))
titleM = "AC (control vs control) A Chromosomes"
titleP = "CA (control vs control) C Chromosomes"
plot.chroms(ac.control.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.control.poly, lgs, 'CA1dp', 'CA2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
##################################################################################################
##################################################################################################
#ABOVE WE LOOKED AT THE AVERAGES ACROSS REPLICATES
#NOW LOOK AT EACH REPLICATE INDIVIDUALLY
#CALCULATE TEH CHROMOSOME-SPECIFIC ALLELE FREQUENCY CHANGES
#for ac replicates 1 and 2
ac.dat$AC1dp.rep1 = chrom.dp(ac.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ac1.ps.delt.p')
ac.dat$AC2dp.rep1 = chrom.dp(ac.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ac1.ps.delt.p')
ac.dat$AC1dp.rep2 = chrom.dp(ac.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ac2.ps.delt.p')
ac.dat$AC2dp.rep2 = chrom.dp(ac.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ac2.ps.delt.p')
ac.dat$CC1dp.rep1 = chrom.dp(ac.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ac1.ps.delt.p')
ac.dat$CC2dp.rep1 = chrom.dp(ac.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ac1.ps.delt.p')
ac.dat$CC1dp.rep2 = chrom.dp(ac.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ac2.ps.delt.p')
ac.dat$CC2dp.rep2 = chrom.dp(ac.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ac2.ps.delt.p')
#for ca replicates
ca.dat$AC1dp.rep1 = chrom.dp(ca.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ca1.ps.delt.p')
ca.dat$AC2dp.rep1 = chrom.dp(ca.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ca1.ps.delt.p')
ca.dat$AC1dp.rep2 = chrom.dp(ca.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ca2.ps.delt.p')
ca.dat$AC2dp.rep2 = chrom.dp(ca.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ca2.ps.delt.p')
ca.dat$CC1dp.rep1 = chrom.dp(ca.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ca1.ps.delt.p')
ca.dat$CC2dp.rep1 = chrom.dp(ca.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ca1.ps.delt.p')
ca.dat$CC1dp.rep2 = chrom.dp(ca.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ca2.ps.delt.p')
ca.dat$CC2dp.rep2 = chrom.dp(ca.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ca2.ps.delt.p')
#FILTER THE DATASETS DOWN TO ONLY THE HETEROZYGOUS LOCI AND ORDER THEM
#for the ac replicates (parent A is mom)
ac.a.poly = ac.dat[ac.dat$crossType != 'nnxnp',] #include variants except when parent A is homozygous
ac.c.poly = ac.dat[ac.dat$crossType != 'lmxll',] #include variants except when parent C is homozygous
ac.a.poly = ac.a.poly[with(ac.a.poly, order(cM)),]
ac.c.poly = ac.c.poly[with(ac.c.poly, order(cM)),]
#for the ca replicates (parent C is mom)
#(note that for linkage mapping all markers were noted as if parent A were mother, so nnxnp indicates that C was heterozygous)
ca.c.poly = ca.dat[ca.dat$crossType != 'lmxll',] #include variants except when parent C is homozygous
ca.a.poly = ca.dat[ca.dat$crossType != 'nnxnp',] #include variants except when parent A is homozygous
ca.c.poly = ca.c.poly[with(ca.c.poly, order(cM)),]
ca.a.poly = ca.a.poly[with(ca.a.poly, order(cM)),]
#for the ac control comparisons
ac.control.poly = AC.control.dat[AC.control.dat$crossType != 'nnxnp',]
ca.control.poly = CA.control.dat[CA.control.dat$crossType != 'lmxll',]
ac.control.poly = ac.control.poly[with(ac.control.poly, order(cM)),]
ca.control.poly = ca.control.poly[with(ca.control.poly, order(cM)),]
#IF NOT USING JUST HETS
# ac.a.poly = ac.dat[with(ac.dat, order(cM)),]
# ac.c.poly = ac.dat[with(ac.dat, order(cM)),]
# ca.a.poly = ca.dat[with(ac.dat, order(cM)),]
# ca.c.poly = ca.dat[with(ac.dat, order(cM)),]
#PLOT REPLICATE CHROMOSOMES OVERLAID
#cross AC parent A
quartz()
COLORS = c('cyan3', 'coral')
bar.colors = c('darkgreen', 'yellowgreen')
par(mfrow = c(1,1))
YLIM = c(-.4, .4)
plot.chroms(ac.a.poly, lgs, 'AC1dp.rep1', 'AC2dp.rep1', YLIM, 'AC cross, A chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.a.poly, lgs, 'AC1dp.rep2', 'AC2dp.rep2', YLIM, 'AC cross, A chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
#cross AC parent C
plot.chroms(ac.c.poly, lgs, 'CC1dp.rep1', 'CC2dp.rep1', YLIM, 'AC cross, C chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.c.poly, lgs, 'CC1dp.rep2', 'CC2dp.rep2', YLIM, 'AC cross, C chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
add.bars(ac.bar, bar.colors)
#cross CA parent C
plot.chroms(ca.c.poly, lgs, 'CC1dp.rep1', 'CC2dp.rep1', YLIM, 'CA cross, C chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.c.poly, lgs, 'CC1dp.rep2', 'CC2dp.rep2', YLIM, 'CA cross, C chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
#cross CA parent A
plot.chroms(ca.a.poly, lgs, 'AC1dp.rep1', 'AC2dp.rep1', YLIM, 'CA cross, A chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.a.poly, lgs, 'AC1dp.rep2', 'AC2dp.rep2', YLIM, 'CA cross, A chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
add.bars(ca.bar, bar.colors)
#FUNCTION TO PLOT THE BARS
add.bars = function(bar.dat, bar.colors){
easy = bar.dat[bar.dat$cut == 'easy',]
for (i in 1:nrow(easy)){
x0 = easy$lefts[i]
x1 = easy$rights[i]
y = .0
segments(x0, y, x1, y, lwd = 3, col = bar.colors[1])
}
hard = bar.dat[bar.dat$cut == 'hard',]
print(hard)
for (i in 1:nrow(hard)){
x0 = hard$lefts[i]
x1 = hard$rights[i]
y = 0
segments(x0, y, x1, y, lwd = 3, col = bar.colors[2])
}
}
#PLOT FOR THE AC REPLICATES
YLIM = c(-.3, .3)
COLORS = c('cyan3', 'coral')
bar.colors = c('darkgreen', 'yellowgreen')
CUT = 0.05
quartz()
par(mfrow = c(2,1))
titleM = "AC (heat vs control) Maternal Chromosomes"
titleP = "AC (heat vs control) Paternal Chromosomes"
YLAB = expression(paste('P'['heat'], " - P"["control"], sep = ""))
plot.chroms(ac.a.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.c.poly, lgs, 'CC1dp', 'CC2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
add.bars(ac.bar, bar.colors)
#PLOT FOR THE CA REPLICATES
quartz()
par(mfrow = c(2,1))
titleM = "CA (heat vs control) Maternal Chromosomes"
titleP = "CA (heat vs control) Paternal Chromosomes"
plot.chroms(ca.c.poly, lgs, 'CC1dp', 'CC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.a.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
add.bars(ca.bar, bar.colors)
#PLOT FOR THE CONTROLS
quartz()
par(mfrow = c(2,1))
titleM = "AC (control vs control) A Chromosomes"
titleP = "CA (control vs control) C Chromosomes"
plot.chroms(ac.control.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.control.poly, lgs, 'CA1dp', 'CA2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
##################################################################################################
#CALCULATE TEH CHROMOSOME-SPECIFIC ALLELE FREQUENCY CHANGES
#for ac replicates 1 and 2
ac.dat$AC1dp.rep1 = chrom.dp(ac.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ac1.ps.delt.p')
ac.dat$AC2dp.rep1 = chrom.dp(ac.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ac1.ps.delt.p')
ac.dat$AC1dp.rep2 = chrom.dp(ac.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ac2.ps.delt.p')
ac.dat$AC2dp.rep2 = chrom.dp(ac.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ac2.ps.delt.p')
ac.dat$CC1dp.rep1 = chrom.dp(ac.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ac1.ps.delt.p')
ac.dat$CC2dp.rep1 = chrom.dp(ac.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ac1.ps.delt.p')
ac.dat$CC1dp.rep2 = chrom.dp(ac.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ac2.ps.delt.p')
ac.dat$CC2dp.rep2 = chrom.dp(ac.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ac2.ps.delt.p')
#for ca replicates
ca.dat$AC1dp.rep1 = chrom.dp(ca.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ca1.ps.delt.p')
ca.dat$AC2dp.rep1 = chrom.dp(ca.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ca1.ps.delt.p')
ca.dat$AC1dp.rep2 = chrom.dp(ca.dat, 'A.c1', 'ref', 'A', 'ref.single', 'ca2.ps.delt.p')
ca.dat$AC2dp.rep2 = chrom.dp(ca.dat, 'A.c2', 'ref', 'A', 'ref.single', 'ca2.ps.delt.p')
ca.dat$CC1dp.rep1 = chrom.dp(ca.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ca1.ps.delt.p')
ca.dat$CC2dp.rep1 = chrom.dp(ca.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ca1.ps.delt.p')
ca.dat$CC1dp.rep2 = chrom.dp(ca.dat, 'C.c1', 'ref', 'C', 'ref.single', 'ca2.ps.delt.p')
ca.dat$CC2dp.rep2 = chrom.dp(ca.dat, 'C.c2', 'ref', 'C', 'ref.single', 'ca2.ps.delt.p')
#FILTER THE DATASETS DOWN TO ONLY THE HETEROZYGOUS LOCI AND ORDER THEM
#for the ac replicates (parent A is mom)
ac.a.poly = ac.dat[ac.dat$crossType != 'nnxnp',] #include variants except when parent A is homozygous
ac.c.poly = ac.dat[ac.dat$crossType != 'lmxll',] #include variants except when parent C is homozygous
ac.a.poly = ac.a.poly[with(ac.a.poly, order(cM)),]
ac.c.poly = ac.c.poly[with(ac.c.poly, order(cM)),]
#for the ca replicates (parent C is mom)
#(note that for linkage mapping all markers were noted as if parent A were mother, so nnxnp indicates that C was heterozygous)
ca.c.poly = ca.dat[ca.dat$crossType != 'lmxll',] #include variants except when parent C is homozygous
ca.a.poly = ca.dat[ca.dat$crossType != 'nnxnp',] #include variants except when parent A is homozygous
ca.c.poly = ca.c.poly[with(ca.c.poly, order(cM)),]
ca.a.poly = ca.a.poly[with(ca.a.poly, order(cM)),]
#for the ac control comparisons
ac.control.poly = AC.control.dat[AC.control.dat$crossType != 'nnxnp',]
ca.control.poly = CA.control.dat[CA.control.dat$crossType != 'lmxll',]
ac.control.poly = ac.control.poly[with(ac.control.poly, order(cM)),]
ca.control.poly = ca.control.poly[with(ca.control.poly, order(cM)),]
#IF NOT USING JUST HETS
# ac.a.poly = ac.dat[with(ac.dat, order(cM)),]
# ac.c.poly = ac.dat[with(ac.dat, order(cM)),]
# ca.a.poly = ca.dat[with(ac.dat, order(cM)),]
# ca.c.poly = ca.dat[with(ac.dat, order(cM)),]
#PLOT REPLICATE CHROMOSOMES OVERLAID
#cross AC parent A
quartz()
COLORS = c('cyan3', 'coral')
bar.colors = c('darkgreen', 'yellowgreen')
par(mfrow = c(1,1))
YLIM = c(-.4, .4)
plot.chroms(ac.a.poly, lgs, 'AC1dp.rep1', 'AC2dp.rep1', YLIM, 'AC cross, A chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.a.poly, lgs, 'AC1dp.rep2', 'AC2dp.rep2', YLIM, 'AC cross, A chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
#cross AC parent C
plot.chroms(ac.c.poly, lgs, 'CC1dp.rep1', 'CC2dp.rep1', YLIM, 'AC cross, C chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.c.poly, lgs, 'CC1dp.rep2', 'CC2dp.rep2', YLIM, 'AC cross, C chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
add.bars(ac.bar, bar.colors)
#cross CA parent C
plot.chroms(ca.c.poly, lgs, 'CC1dp.rep1', 'CC2dp.rep1', YLIM, 'CA cross, C chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.c.poly, lgs, 'CC1dp.rep2', 'CC2dp.rep2', YLIM, 'CA cross, C chromosomes (dam)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
#cross CA parent A
plot.chroms(ca.a.poly, lgs, 'AC1dp.rep1', 'AC2dp.rep1', YLIM, 'CA cross, A chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ca.a.poly, lgs, 'AC1dp.rep2', 'AC2dp.rep2', YLIM, 'CA cross, A chromosomes (sire)', "Linkage Group", YLAB, COLORS, CUT, TRUE)
add.bars(ca.bar, bar.colors)
#PLOT FOR THE AC REPLICATES
YLIM = c(-.3, .3)
COLORS = c('cyan3', 'coral')
bar.colors = c('darkgreen', 'yellowgreen')
CUT = 0.05
quartz()
par(mfrow = c(2,1))
titleM = "AC (heat vs control) Maternal Chromosomes"
titleP = "AC (heat vs control) Paternal Chromosomes"
YLAB = expression(paste('P'['heat'], " - P"["control"], sep = ""))
plot.chroms(ac.a.poly, lgs, 'AC1dp', 'AC2dp', YLIM, titleM, "Linkage Group", YLAB, COLORS, CUT, FALSE)
plot.chroms(ac.c.poly, lgs, 'CC1dp', 'CC2dp', YLIM, titleP, "Linkage Group", YLAB, COLORS, CUT, FALSE)
add.bars(ac.bar, bar.colors)
#LOAD THE DATA OUTPUT FROM selection_analysis2_chiSquare.R
path.2.working.dir = "~/git_Repositories/linkage_mapping_and_selection/data_files/"
setwd(path.2.working.dir)
load('selection_analysis2_output.R')
##################################################################
########## LOOKING AT WHICH GENES ARE BENEATH THE PEAKS ##########
##################################################################
setwd("./gene_data/")
#here the center point for the major peaks are identified as the variant with the highest -log(p)
#we then look for orthologs from the Acropora millepora transcriptome (Moya 2011) that align (Blast) near that locus
#UPLOAD ORTHOLOG (GENE) COORDINATES ON THE MAP
##This method works with the python script iso_to_LG.py and some blast results
genes = read.table('gene_lg_coordinates.txt', header = T, sep = "\t")
##This dataset is generated from the python script iso_to_LG.py and some blast results
##it includes all putative genes and was generated with this command: iso_to_LG.py -m linkage_map_Rinput.txt -s allIsogroups.txt -i amil_iso2gene.tab -o allGenes2LgOut.txt -a amil_Blast2_amil_genome_fold_c.out -tig2group amil_seq2iso.txt
##for more on gene annotation see Matz lab website: http://www.bio.utexas.edu/research/matz_lab/matzlab/Methods.html
#GET THE CENTER POINT FOR EACH GENE
genes$scaff.pos = apply(genes[3:4], 1, mean)
#FUNCTION get.scaff.pos()
#pulls scaffold positions from each variant name
#each variant name contains its scaffold coordinate (c486289_87218 is located on scaffold 486289 at position 87218)
get.scaff.pos = function(df, varcol, split.position){
vec = c() ##place to store either bit of RAD tag
for (i in df[,varcol]){
dat = strsplit(i, '_')[[1]][split.position]
vec = append(vec, dat)
}
return(vec)
}
#FUNCTION get.top()
#returns the most significant variant for a given linkage group
#if multiple points
get.top = function(df, lg){
df$adj.logp = -log(p.adjust(df$p, method = 'BH'), 10)
sub = df[df$LG == lg,]
sub = sub[sub$p == min(sub$p),]
point = sub$CM
print(paste("Top point =", point))
return(sub)
}
#FUNCTION get.sub()
#pull only the significant variants for a given linkage group
get.sub = function(df, lg, cut){##subset a mapping dataframe for significant markers on a given lg
df$adj.logp = -log(p.adjust(df$p, method = 'BH'), 10)
sub = df[df$LG == lg,]
sub = sub[sub$adj.logp > cut,]
sub = sub[with(sub, order(VARIANT)),]
}
#SOME FUNCTIONS FOR PULLING GENES BASED ON DIFFERENT CRITERIA:
#FUNCTION pull.genes.based.on.lg()
##pulls genes close to a given map position in a given linkage group
pull.genes.based.on.lg = function(lg, pos, genes.df, win.size){
lg.sub = genes.df[genes.df$lg == lg,]
left = pos - (.5*win.size)
right = pos + (.5*win.size)
win.sub = lg.sub[lg.sub$cM > left,]
win.sub = win.sub[win.sub$cM < right,]
print(paste("Found", length(win.sub[,1]), "genes within the window"))
return(win.sub)
}##pulls genes based on predicted linkage map position assigned as that of the closest RAD marker
#FUNCTION pull.genes.based.on.scaffold
#pulls isogroups that map to a specified genomic scaffold within a given range of a given point
#returns both annotated an unannotated isogroups
pull.genes.based.on.scaffold = function(scaff, genes.df, bp.left, bp.right){
lg.sub = genes.df[genes.df$scaffold == scaff,]#subset the scaffold
win.sub = lg.sub[lg.sub$scaff.pos > bp.left,]#subset for left and right bounds
win.sub = win.sub[win.sub$scaff.pos < bp.right,]
print(paste("Found", length(win.sub[,1]), "genes within the window"))
return(win.sub)
}#pulls genes from a specified scaffold, within specified bp boundaries
#FUNCTION get.best.ranked()
#pulls the top X closest genes to a given position in a genomic scaffold
#only returns annotated genes
get.best.ranked = function(X, top.scaff, top.bp){
g = genes[genes$scaffold == top.scaff,]
g = na.omit(g)
g$dist = abs(g$scaff.pos - top.bp)
g = g[with(g, order(dist)),]
best.ranked = g[1:X,]
print(paste("Top", X, "Named Genes in proximity to top RAD marker"))
return(best.ranked)
}
#PREP THE DATASETS
ca.df$scaff = get.scaff.pos(ca.df, 'VARIANT', 1)
ca.df$pos = get.scaff.pos(ca.df, 'VARIANT', 2)
ac.df$scaff = get.scaff.pos(ac.df, 'VARIANT', 1)
ac.df$pos = get.scaff.pos(ac.df, 'VARIANT', 2)
#########################################################
############ LOOK AT GENES NEAR PEAK AT LG 5 ############
#########################################################
#PULL THE FIGURE BACK UP
par(mfrow = c(1,1))
do.plot(ac.ps, 'Selection in AC Replicates', 100, 5, 100)
#ASSIGN CRITERIA FOR BEING NEAR THE PEAK
lg = 5
rank = 15
cM.win.size = 5
bp.win.size = 200000
#SUBSET THE DATASET
peak5 = get.sub(ac.df, lg, 2)
#PULL THE TOP LOCUS
top = get.top(ac.df, lg)
#ASSIGN THE COORDINATES FOR THE WINDOW WE ARE LOOKING IN
top.scaff = top$scaff
top.bp = as.numeric(top$pos)
top.cM = top$CM
abline(v = top.cM)
bp.left = top.bp - bp.win.size*.5
bp.right = top.bp + bp.win.size*.5
#SET UP THE GENES FOUND ON THIS SCAFFOLD
g = genes[genes$scaffold == top.scaff,]
#PULL THE GENES BASED ON LINKAGE GROUP
top.genes = pull.genes.based.on.lg(lg, top.cM, genes, cM.win.size)
print(top.genes)
#PULL THE GENES BASED ON SCAFFOLD
top.lg5.scaffold  = pull.genes.based.on.scaffold(top.scaff, genes, bp.left, bp.right)
print(top.lg5.scaffold )
#GRAB THE TOP GENES RANKED BY PROXIMITY TO CENTER OF PEAK
top15.lg5 = get.best.ranked(rank, top.scaff, top.bp)
##########################################################
############ LOOK AT GENES NEAR PEAK AT LG 10 ############
##########################################################
#LOOK AT THE PEAK
do.plot(ca.ps, 'Selection in CA Replicates', 100, 5, 100)
#SUBSET FOR THE PEAK
peak10 = get.sub(ca.df, 10, 2)
#SET PROXIMITY CIRTERIA
lg = 10
cut = 2
rank = 15
cM.win.size = 3
bp.win.size = 200000
bp.left = top.bp - bp.win.size*.5
bp.right = top.bp + bp.win.size*.5
#PULL THE TOP MARKER AND ITS COORDINATES
top = get.top(ca.df, lg)
top.bp = as.numeric(top$pos)
top.cM = top$CM
abline(v = top.cM)
top.scaff = top$scaff
#GET THE LISTS OF GENES
g = genes[genes$scaffold == top.scaff,]##the genes that align to the top scaffold
top = get.top(ca.df, lg)
top.bp = as.numeric(top$pos)
bp.left = top.bp - bp.win.size*.5
bp.right = top.bp + bp.win.size*.5
top.lg10.lg = pull.genes.based.on.lg(lg, top$CM, genes, cM.win.size) ##get the genes based on predicted locations
top.lg10.scaffold = pull.genes.based.on.scaffold(top.scaff, genes, bp.left, bp.right)##get the genes based on scaffold
top15.lg10 = get.best.ranked(rank, top.scaff, top.bp) ## get the top ranked genes in proximity to the most significant RAD locus (only includes annoated)
print(top.lg10.lg)
print(top.lg10.scaffold)
print(top15.lg10)
#WRITE OUT THE GENES FROM LG 1- PEAK
write.table(top.lg10.scaffold, "./genes_under_lg10_peak.txt", quote = F, row.names = F)
print('Genes Near Selection Peak on Linkage Group 10:')
print(top.lg10.scaffold)
